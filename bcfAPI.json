{
  "openapi": "3.0.2",
  "info": {
    "title": "BCF OpenAPI",
    "description": "An openAPI for the BIM Collaboration format (BCF), based on the [BCF-API](https://github.com/buildingSMART/BCF-API/tree/release_2_1)",
    "version": "2.1"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "paths": {
    "/bcf/versions": {
      "get": {
        "tags": [
          "Public Services"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_GET"
                },
                "example": {
                  "versions": [
                    {
                      "version_id": "1.0",
                      "detailed_version": "https://github.com/BuildingSMART/BCF-API"
                    },
                    {
                      "version_id": "2.1",
                      "detailed_version": "https://github.com/BuildingSMART/BCF-API"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/auth": {
      "get": {
        "tags": [
          "Public Services"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth_GET"
                },
                "example": {
                  "oauth2_auth_url": "https://example.com/bcf/oauth2/auth",
                  "oauth2_token_url": "https://example.com/bcf/oauth2/token",
                  "oauth2_dynamic_client_reg_url": "https://example.com/bcf/oauth2/reg",
                  "http_basic_supported": true,
                  "supported_oauth2_flows": [
                    "authorization_code_grant",
                    "implicit_grant",
                    "resource_owner_password_credentials_grant"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/bcf/oauth2/reg": {
      "get": {
        "tags": [
          "Public Services"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dynRegClient_GET"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Public Services"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dynRegClient_POST"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dynRegClient_GET"
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/current-user": {
      "get": {
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_GET"
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Retrieve a collection of projects where the currently logged on user has access to.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projects"
                },
                "example": [
                  {
                    "project_id": "F445F4F2-4D02-4B2A-B612-5E456BEF9137",
                    "name": "Example project 1",
                    "authorization": {
                      "project_actions": [
                        "createTopic",
                        "createDocument"
                      ]
                    }
                  },
                  {
                    "project_id": "A233FBB2-3A3B-EFF4-C123-DE22ABC8414",
                    "name": "Example project 2",
                    "authorization": {
                      "project_actions": []
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Retrieve a specific project.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project_GET"
                },
                "example": {
                  "project_id": "B724AAC3-5B2A-234A-D143-AE33CC18414",
                  "name": "Example project 3",
                  "authorization": {
                    "project_actions": [
                      "update"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Modify a specific project. This operation is only possible when the server returns the update flag in the Project authorization, see section 4.1.5",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/project_PUT"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project_GET"
                },
                "example": {
                  "project_id": "B724AAC3-5B2A-234A-D143-AE33CC18414",
                  "name": "Example project 3 - Second Section",
                  "authorization": {
                    "project_actions": [
                      "update"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/extensions": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Retrieve a specific projects extensions. Project extensions are used to define possible values that can be used in topics and comments, for example topic labels and priorities.\nThey may change during the course of a project. The most recent extensions state which values are valid at a given moment for newly created topics and comments.\n",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/extensions_GET"
                },
                "example": {
                  "topic_type": [
                    "Information",
                    "Error"
                  ],
                  "topic_status": [
                    "Open",
                    "Closed",
                    "ReOpened"
                  ],
                  "topic_label": [
                    "Architecture",
                    "Structural",
                    "MEP"
                  ],
                  "snippet_type": [
                    ".ifc",
                    ".csv"
                  ],
                  "priority": [
                    "Low",
                    "Medium",
                    "High"
                  ],
                  "user_id_type": [
                    "Architect@example.com",
                    "BIM-Manager@example.com",
                    "bob_heater@example.com"
                  ],
                  "stage": [
                    "Preliminary Planning End",
                    "Construction Start",
                    "Construction End"
                  ],
                  "project_actions": [
                    "update",
                    "createTopic",
                    "createDocument"
                  ],
                  "topic_actions": [
                    "update",
                    "updateBimSnippet",
                    "updateRelatedTopics",
                    "updateDocumentReferences",
                    "updateFiles",
                    "createComment",
                    "createViewpoint"
                  ],
                  "comment_actions": [
                    "update"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics": {
      "get": {
        "tags": [
          "Topics"
        ],
        "summary": "Retrieve a collection of topics related to a project (default sort order is creation_date).",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)\n\n|parameter|type|description|\n|---------|----|-----------|\n|creation_author|string|userId of the creation author (value from extensions)|\n|modified_author|string|userId of the modified author (value from extensions)|\n|assigned_to|string|userId of the assigned person (value from extensions)|\n|stage|string|stage this topic is part of (value from extensions)|\n|topic_status|string|status of a topic (value from extensions)|\n|topic_type|string|type of a topic (value from extensions)|\n|creation_date|datetime|creation date of a topic|\n|modified_date|datetime|modification date of a topic|\n|labels|array (string)|labels of a topic (value from extensions)|\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "assigned_to eq 'Architect@example.com' and topic_status eq 'Open' and creation_date gt 2015-12-05T00:00:00+01:00"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)\n\n|parameter|description|\n|---------|-----------|\n|creation_date|creation date of a topic|\n|modified_date|modification date of a topic|\n|index|index of a topic|   \n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "modified_date desc"
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/topic_GET"
                  }
                },
                "example": [
                  {
                    "guid": "A245F4F2-2C01-B43B-B612-5E456BEF8116",
                    "creation_author": "Architect@example.com",
                    "title": "Example topic 1",
                    "labels": [
                      "Architecture",
                      "Structural"
                    ],
                    "creation_date": "2013-10-21T17:34:22.409Z"
                  },
                  {
                    "guid": "A211FCC2-3A3B-EAA4-C321-DE22ABC8414",
                    "creation_author": "Architect@example.com",
                    "title": "Example topic 2",
                    "labels": [
                      "Architecture",
                      "Heating",
                      "Electrical"
                    ],
                    "creation_date": "2014-11-19T14:24:11.316Z"
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Topics"
        ],
        "summary": "Add a new topic. This operation is only possible when the server returns the createTopic flag in the Project authorization, see section 3.1.5",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/topic_POST"
              },
              "example": {
                "topic_type": "Clash",
                "topic_status": "open",
                "title": "Example topic 3",
                "priority": "high",
                "labels": [
                  "Architecture",
                  "Heating"
                ],
                "assigned_to": "harry.muster@example.com",
                "bim_snippet": {
                  "snippet_type": "clash",
                  "is_external": true,
                  "reference": "https://example.com/bcf/1.0/ADFE23AA11BCFF444122BB",
                  "reference_schema": "https://example.com/bcf/1.0/clash.xsd"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/topic_GET"
                },
                "example": {
                  "guid": "A245F4F2-2C01-B43B-B612-5E456BEF8116",
                  "server_assigned_id": "ISSUE-01462",
                  "creation_author": "Architect@example.com",
                  "creation_date": "2016-08-01T17:34:22.409Z",
                  "topic_type": "Clash",
                  "topic_status": "open",
                  "title": "Example topic 3",
                  "priority": "high",
                  "labels": [
                    "Architecture",
                    "Heating"
                  ],
                  "assigned_to": "harry.muster@example.com",
                  "bim_snippet": {
                    "snippet_type": "clash",
                    "is_external": true,
                    "reference": "https://example.com/bcf/1.0/ADFE23AA11BCFF444122BB",
                    "reference_schema": "https://example.com/bcf/1.0/clash.xsd"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}": {
      "get": {
        "tags": [
          "Topics"
        ],
        "summary": "Retrieve a specific topic.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/topic_GET"
                },
                "example": {
                  "guid": "B345F4F2-3A04-B43B-A713-5E456BEF8228",
                  "creation_author": "Architect@example.com",
                  "creation_date": "2016-08-01T17:34:22.409Z",
                  "topic_type": "Clash",
                  "topic_status": "open",
                  "title": "Example topic 3",
                  "priority": "high",
                  "labels": [
                    "Architecture",
                    "Heating"
                  ],
                  "assigned_to": "harry.muster@example.com",
                  "bim_snippet": {
                    "snippet_type": "clash",
                    "is_external": true,
                    "reference": "https://example.com/bcf/1.0/ADFE23AA11BCFF444122BB",
                    "reference_schema": "https://example.com/bcf/1.0/clash.xsd"
                  },
                  "authorization": {
                    "topic_actions": [
                      "createComment",
                      "createViewpoint"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Topics"
        ],
        "summary": "Modify a specific topic, description similar to POST. This operation is only possible when the server returns the update flag in the Topic authorization, see section 4.2.8",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/topic_PUT"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/topic_GET"
                },
                "example": {
                  "guid": "B345F4F2-3A04-B43B-A713-5E456BEF8228",
                  "creation_author": "Architect@example.com",
                  "creation_date": "2016-08-01T17:34:22.409Z",
                  "modified_author": "Architect@example.com",
                  "modified_date": "2016-08-02T13:22:22.409Z",
                  "topic_type": "Clash",
                  "topic_status": "open",
                  "title": "Example topic 3 - Changed Title",
                  "priority": "high",
                  "labels": [
                    "Architecture",
                    "Heating"
                  ],
                  "assigned_to": "harry.muster@example.com",
                  "bim_snippet": {
                    "snippet_type": "clash",
                    "is_external": true,
                    "reference": "https://example.com/bcf/1.0/ADFE23AA11BCFF444122BB",
                    "reference_schema": "https://example.com/bcf/1.0/clash.xsd"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Topics"
        ],
        "summary": "Deletes a single topic. This operation is only possible when the server returns the delete flag in the Topic authorization, see section 4.2.8",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}/snippet": {
      "get": {
        "tags": [
          "Snippets"
        ],
        "summary": "Retrieves a topics BIM-Snippet as binary file.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Snippets"
        ],
        "summary": "Puts a new BIM Snippet binary file to a topic. If this is used, the parent topics BIM Snippet property is_external must\nbe set to false and the reference must be the file name with extension. This operation is only possible when the server returns the updateBimSnippet\nflag in the Topic authorization, see section 4.2.8\n",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve a collection of file references as topic header. Implementer Note: The reference property can either be an Uri or a server specific id.\nUris are given as absolute paths to the model files while ids reference a custom id of the model file and require custom logic per server to retrieve it.\nThis allows referencing of files on the server but requires clients to know how to retrieve files in a specific implementation.\n",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/file_GET"
                  }
                },
                "example": [
                  {
                    "ifc_project": "0J$yPqHBD12v72y4qF6XcD",
                    "file_name": "OfficeBuilding_Architecture_0001.ifc",
                    "reference": "https://example.com/files/0J$yPqHBD12v72y4qF6XcD_0001.ifc"
                  },
                  {
                    "ifc_project": "3hwBHP91jBRwPsmyf$3Hea",
                    "file_name": "OfficeBuilding_Heating_0003.ifc",
                    "reference": "cf37bae6-0900-46be-b37f-b34754fe0b4a"
                  }
                ]
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Files"
        ],
        "summary": "Update a collection of file references on the topic header. This operation is only possible when the server returns the updateFiles flag in the Topic authorization,\nsee section 4.2.8\n",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/file_PUT"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/file_GET"
                  }
                },
                "example": [
                  {
                    "ifc_project": "0J$yPqHBD12v72y4qF6XcD",
                    "file_name": "OfficeBuilding_Architecture_0001.ifc",
                    "reference": "https://example.com/files/0J$yPqHBD12v72y4qF6XcD_0001.ifc"
                  },
                  {
                    "ifc_project": "3hwBHP91jBRwPsmyf$3Hea",
                    "file_name": "OfficeBuilding_Heating_0003.ifc",
                    "reference": "https://example.com/files/3hwBHP91jBRwPsmyf$3Hea_0003.ifc"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}/comments": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Retrieve a collection of all comments related to a topic (default ordering is date).",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)\n\n|parameter|type|description|\n|---------|----|-----------|\n|author|string|userId of the author (value from extensions)|\n|date|datetime|creation date of a comment|\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "assigned_to eq 'Architect@example.com' and topic_status eq 'Open' and creation_date gt 2015-12-05T00:00:00+01:00"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)\n\n|parameter|description|\n|---------|-----------|\n|date|creation date of a comment|\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "modified_date desc"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/comment_GET"
                  }
                },
                "example": [
                  {
                    "guid": "C4215F4D-AC45-A43A-D615-AA456BEF832B",
                    "date": "2016-08-01T12:34:22.409Z",
                    "author": "max.muster@example.com",
                    "comment": "Clash found",
                    "topic_guid": "B345F4F2-3A04-B43B-A713-5E456BEF8228",
                    "authorization": {
                      "comment_actions": [
                        "update"
                      ]
                    }
                  },
                  {
                    "guid": "A333FCA8-1A31-CAAC-A321-BB33ABC8414",
                    "date": "2016-08-01T14:24:11.316Z",
                    "author": "bob.heater@example.com",
                    "comment": "will rework the heating model",
                    "topic_guid": "B345F4F2-3A04-B43B-A713-5E456BEF8228"
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Add a new comment to a topic. This operation is only possible when the server returns the createComment flag in the Topic authorization, see section 4.2.8",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/comment_POST"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment_GET"
                },
                "example": {
                  "guid": "A333FCA8-1A31-CAAC-A321-BB33ABC8414",
                  "date": "2016-08-01T14:24:11.316Z",
                  "author": "bob.heater@example.com",
                  "comment": "will rework the heating model",
                  "topic_guid": "B345F4F2-3A04-B43B-A713-5E456BEF8228"
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}/comments/{comment_id}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get a single comment.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment_GET"
                },
                "example": {
                  "guid": "A333FCA8-1A31-CAAC-A321-BB33ABC8414",
                  "date": "2016-08-01T14:24:11.316Z",
                  "author": "bob.heater@example.com",
                  "comment": "will rework the heating model",
                  "topic_guid": "B345F4F2-3A04-B43B-A713-5E456BEF8228"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Comments"
        ],
        "summary": "Update a single comment, description similar to POST. This operation is only possible when the server returns the update\nflag in the Comment authorization, see section 4.4.6\n",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/comment_PUT"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment_GET"
                },
                "example": {
                  "guid": "A333FCA8-1A31-CAAC-A321-BB33ABC8414",
                  "date": "2016-08-01T14:24:11.316Z",
                  "author": "bob.heater@example.com",
                  "comment": "will rework the heating model",
                  "topic_guid": "B345F4F2-3A04-B43B-A713-5E456BEF8228"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Comments"
        ],
        "summary": "Deletes a single comment. This operation is only possible when the server returns the delete flag in the Comment authorization, see section 4.4.6",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}/viewpoints": {
      "get": {
        "tags": [
          "Viewpoints"
        ],
        "summary": "Retrieve a collection of all viewpoints related to a topic.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/viewpoint_GET"
                  }
                },
                "example": [
                  {
                    "guid": "b24a82e9-f67b-43b8-bda0-4946abf39624",
                    "perspective_camera": {
                      "camera_view_point": {
                        "x": 0,
                        "y": 0,
                        "z": 0
                      },
                      "camera_direction": {
                        "x": 1,
                        "y": 1,
                        "z": 2
                      },
                      "camera_up_vector": {
                        "x": 0,
                        "y": 0,
                        "z": 1
                      },
                      "field_of_view": 90
                    },
                    "lines": [
                      {
                        "start_point": {
                          "x": 2,
                          "y": 1,
                          "z": 1
                        },
                        "end_point": {
                          "x": 0,
                          "y": 1,
                          "z": 0.7
                        }
                      }
                    ],
                    "clipping_planes": [
                      {
                        "location": {
                          "x": 0.7,
                          "y": 0.3,
                          "z": -0.2
                        },
                        "direction": {
                          "x": 1,
                          "y": 0.4,
                          "z": 0.1
                        }
                      }
                    ]
                  },
                  {
                    "guid": "a11a82e7-e66c-34b4-ada1-5846abf39133",
                    "perspective_camera": {
                      "camera_view_point": {
                        "x": 0,
                        "y": 0,
                        "z": 0
                      },
                      "camera_direction": {
                        "x": 1,
                        "y": 1,
                        "z": 2
                      },
                      "camera_up_vector": {
                        "x": 0,
                        "y": 0,
                        "z": 1
                      },
                      "field_of_view": 90
                    },
                    "lines": [
                      {
                        "start_point": {
                          "x": 1,
                          "y": 1,
                          "z": 1
                        },
                        "end_point": {
                          "x": 0,
                          "y": 0,
                          "z": 0
                        }
                      }
                    ],
                    "clipping_planes": [
                      {
                        "location": {
                          "x": 0.5,
                          "y": 0.5,
                          "z": 0.5
                        },
                        "direction": {
                          "x": 1,
                          "y": 0,
                          "z": 0
                        }
                      }
                    ]
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Viewpoints"
        ],
        "summary": "Add a new viewpoint. Viewpoints are immutable, meaning that they should never change. Requirements for different visualizations should be handled by\ncreating new viewpoint elements. This operation is only possible when the server returns the createViewpoint flag in the Topic authorization, see section 4.2.8\n",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/viewpoint_POST"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/viewpoint_GET"
                },
                "example": {
                  "guid": "a11a82e7-e66c-34b4-ada1-5846abf39133",
                  "index": 10,
                  "perspective_camera": {
                    "camera_view_point": {
                      "x": 0,
                      "y": 0,
                      "z": 0
                    },
                    "camera_direction": {
                      "x": 1,
                      "y": 1,
                      "z": 2
                    },
                    "camera_up_vector": {
                      "x": 0,
                      "y": 0,
                      "z": 1
                    },
                    "field_of_view": 90
                  },
                  "lines": [
                    {
                      "start_point": {
                        "x": 1,
                        "y": 1,
                        "z": 1
                      },
                      "end_point": {
                        "x": 0,
                        "y": 0,
                        "z": 0
                      }
                    }
                  ],
                  "clipping_planes": [
                    {
                      "location": {
                        "x": 0.5,
                        "y": 0.5,
                        "z": 0.5
                      },
                      "direction": {
                        "x": 1,
                        "y": 0,
                        "z": 0
                      }
                    }
                  ],
                  "bitmaps": [
                    {
                      "guid": "20c1cb56-315f-4a0a-922d-ed7a4a8edf55",
                      "bitmap_type": "jpg",
                      "location": {
                        "x": 10,
                        "y": -10,
                        "z": 7
                      },
                      "normal": {
                        "x": -1,
                        "y": 1.25,
                        "z": 0
                      },
                      "up": {
                        "x": -5.4,
                        "y": -4.3,
                        "z": 1
                      },
                      "height": 1666
                    }
                  ],
                  "snapshot": {
                    "snapshot_type": "png"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}/viewpoints/{viewpoint_id}": {
      "get": {
        "tags": [
          "Viewpoints"
        ],
        "summary": "Retrieve a specific viewpoint.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewpoint_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/viewpoint_GET"
                },
                "example": {
                  "guid": "a11a82e7-e66c-34b4-ada1-5846abf39133",
                  "index": 10,
                  "perspective_camera": {
                    "camera_view_point": {
                      "x": 0,
                      "y": 0,
                      "z": 0
                    },
                    "camera_direction": {
                      "x": 1,
                      "y": 1,
                      "z": 2
                    },
                    "camera_up_vector": {
                      "x": 0,
                      "y": 0,
                      "z": 1
                    },
                    "field_of_view": 90
                  },
                  "lines": [
                    {
                      "start_point": {
                        "x": 1,
                        "y": 1,
                        "z": 1
                      },
                      "end_point": {
                        "x": 0,
                        "y": 0,
                        "z": 0
                      }
                    }
                  ],
                  "clipping_planes": [
                    {
                      "location": {
                        "x": 0.5,
                        "y": 0.5,
                        "z": 0.5
                      },
                      "direction": {
                        "x": 1,
                        "y": 0,
                        "z": 0
                      }
                    }
                  ],
                  "bitmaps": [
                    {
                      "guid": "20c1cb56-315f-4a0a-922d-ed7a4a8edf55",
                      "bitmap_type": "jpg",
                      "location": {
                        "x": 10,
                        "y": -10,
                        "z": 7
                      },
                      "normal": {
                        "x": -1,
                        "y": 1.25,
                        "z": 0
                      },
                      "up": {
                        "x": -5.4,
                        "y": -4.3,
                        "z": 1
                      },
                      "height": 1666
                    }
                  ],
                  "snapshot": {
                    "snapshot_type": "png"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}/viewpoints/{viewpoint_id}/snapshot": {
      "get": {
        "tags": [
          "Viewpoints"
        ],
        "summary": "Retrieve a viewpoints snapshot (png or jpg) as image file. A viewpoint contains a snapshot if viewpoint.snapshot != null.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewpoint_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}/viewpoints/{viewpoint_id}/bitmaps/{bitmap_id}": {
      "get": {
        "tags": [
          "Viewpoints"
        ],
        "summary": "Retrieve a specific viewpoints bitmap image file (png or jpg).",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewpoint_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bitmap_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}/viewpoints/{viewpoint_id}/selection": {
      "get": {
        "tags": [
          "Viewpoints"
        ],
        "summary": "Retrieve a collection of all selected components in a viewpoint.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewpoint_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/selection_GET"
                },
                "example": {
                  "selection": [
                    {
                      "ifc_guid": "2MF28NhmDBiRVyFakgdbCT",
                      "originating_system": "Example CAD Application",
                      "authoring_tool_id": "EXCAD/v1.0"
                    },
                    {
                      "ifc_guid": "3$cshxZO9AJBebsni$z9Yk"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}/viewpoints/{viewpoint_id}/coloring": {
      "get": {
        "tags": [
          "Viewpoints"
        ],
        "summary": "Retrieve a collection of all colored components in a viewpoint.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewpoint_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/coloring_GET"
                },
                "example": {
                  "coloring": [
                    {
                      "color": "#ff0000",
                      "components": [
                        {
                          "ifc_guid": "2MF28NhmDBiRVyFakgdbCT",
                          "originating_system": "Example CAD Application",
                          "authoring_tool_id": "EXCAD/v1.0"
                        },
                        {
                          "ifc_guid": "3$cshxZO9AJBebsni$z9Yk"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}/viewpoints/{viewpoint_id}/visibility": {
      "get": {
        "tags": [
          "Viewpoints"
        ],
        "summary": "Retrieve visibility of components in a viewpoint.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewpoint_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/visibility_GET"
                },
                "example": {
                  "visibility": {
                    "default_visibility": true,
                    "exceptions": [
                      {
                        "ifc_guid": "2MF28NhmDBiRVyFakgdbCT",
                        "originating_system": "Example CAD Application",
                        "authoring_tool_id": "EXCAD/v1.0"
                      },
                      {
                        "ifc_guid": "3$cshxZO9AJBebsni$z9Yk"
                      }
                    ],
                    "view_setup_hints": {
                      "spaces_visible": true,
                      "space_boundaries_visible": false,
                      "openings_visible": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}/related_topics": {
      "get": {
        "tags": [
          "Related Topics"
        ],
        "summary": "Retrieve a collection of all related topics to a topic.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/related_topic_GET"
                  }
                },
                "example": [
                  {
                    "related_topic_guid": "db49df2b-0e42-473b-a3ee-f7b785d783c4"
                  },
                  {
                    "related_topic_guid": "6963a846-54d1-4050-954d-607cd5e48aa3"
                  }
                ]
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Related Topics"
        ],
        "summary": "Add or update a collection of all related topics to a topic. This operation is only possible when the server returns the updateRelatedTopics\nflag in the Topic authorization, see section 4.2.8\n",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/related_topic_PUT"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/related_topic_GET"
                  }
                },
                "example": [
                  {
                    "related_topic_guid": "db49df2b-0e42-473b-a3ee-f7b785d783c4"
                  },
                  {
                    "related_topic_guid": "6963a846-54d1-4050-954d-607cd5e48aa3"
                  },
                  {
                    "related_topic_guid": "bac66ab4-331e-4f21-a28e-083d2cf2e796"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}/document_references": {
      "get": {
        "tags": [
          "Document References"
        ],
        "summary": "Add a document reference to a topic. This operation is only possible when the server returns the updateDocumentReferences\nflag in the Topic authorization, see section 4.2.8\n",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/document_reference_GET"
                  }
                },
                "example": [
                  {
                    "guid": "212ab37a-6122-448e-86fc-86503183b520",
                    "url": "http://example.com/files/LegalRequirements.pdf",
                    "description": "The legal requirements for buildings."
                  },
                  {
                    "guid": "6cbfe31d-95c3-4f4d-92a6-420c23698721",
                    "document_guid": "472ab37a-6122-448e-86fc-86503183b520",
                    "description": "The building owners global design parameters for buildings."
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Document References"
        ],
        "summary": "Add a document reference to a topic. This operation is only possible when the server returns the updateDocumentReferences flag in the Topic authorization, see section 4.2.8\n\nShould either reference an internal or an external document.\n\nInternal\ndocument_guid must match an existing document in the project\nurl must be null\nExternal\ndocument_guid must be null\nurl must be the url to the external resource\n",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/document_reference_POST"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document_reference_GET"
                },
                "example": {
                  "guid": "275ab37a-6122-448e-86fc-86503183b520",
                  "url": "http://example.com/files/LegalRequirements.pdf",
                  "description": "The legal requirements for buildings."
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}/document_references/{document_reference_id}": {
      "put": {
        "tags": [
          "Document References"
        ],
        "summary": "Update an existing document reference identified by guid. Uses the same rules as POST Document Reference Service.\nThis operation is only possible when the server returns the updateDocumentReferences flag in the Topic authorization, see section 4.2.8\n",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document_reference_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/document_reference_PUT"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document_reference_GET"
                },
                "example": {
                  "guid": "135ab37a-6122-448e-86fc-86503183b520",
                  "url": "http://example.com/files/LegalRequirements_Update.pdf",
                  "description": "The legal requirements for buildings."
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}/documents": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Retrieve a collection of all documents uploaded to a project.\n",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/document_GET"
                  }
                },
                "example": [
                  {
                    "guid": "472ab37a-6122-448e-86fc-86503183b520",
                    "filename": "LegalRequirements.pdf"
                  },
                  {
                    "guid": "6cbfe31d-95c3-4f4d-92a6-420c23698721",
                    "filename": "DesignParameters.pdf"
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Upload a document (binary file) to a project. This operation is only possible when the server returns the createDocument\nflag in the Project authorization, see section 4.1.5\n",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document_GET"
                },
                "example": {
                  "guid": "472ab37a-6122-448e-86fc-86503183b520",
                  "filename": "Official_Building_Permission.pdf"
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/documents/{document_id}": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Retrieves a document as binary file.\n",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieve a collection of topic events related to a project (default sort order is date).\n",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)\n\n|parameter|type|description|\n|---------|----|-----------|\n|topic_guid|string|guid of the topic |\n|author|string|userId of the author (value from extensions)|\n|type|string|type of the event (value from Topic event types, table above)|\n|date|datetime|date of the event|    \n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "author eq 'Architect@example.com' and type eq 'status_updated' and date gt 2015-12-05T00:00:00+01:00&"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)\n\n|parameter|description|\n|---------|-----------|\n|date|date of the event|\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "date asc"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/topic_event_GET"
                  }
                },
                "example": [
                  {
                    "topic_guid": "A211FCC2-3A3B-EAA4-C321-DE22ABC8414",
                    "date": "2014-11-19T14:24:11.316Z",
                    "author": "Architect@example.com",
                    "events": [
                      {
                        "type": "status_updated",
                        "value": "Closed"
                      }
                    ]
                  },
                  {
                    "topic_guid": "A245F4F2-2C01-B43B-B612-5E456BEF8116",
                    "date": "2013-10-21T17:34:22.409Z",
                    "author": "Architect@example.com",
                    "events": [
                      {
                        "type": "type_updated",
                        "value": "Warning"
                      }
                    ]
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieve a collection of topic events related to a project (default sort order is date).\n",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)\n\n|parameter|type|description|\n|---------|----|-----------|\n|author|string|userId of the author (value from extensions)|\n|type|string|type of the event (value from Topic event types, table above)|\n|date|datetime|date of the event|    \n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "author eq 'Architect@example.com' and type eq 'status_updated' and date gt 2015-12-05T00:00:00+01:00&"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)\n\n|parameter|description|\n|---------|-----------|\n|date|date of the event|\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "date asc"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/topic_event_GET"
                  }
                },
                "example": [
                  {
                    "topic_guid": "A245F4F2-2C01-B43B-B612-5E456BEF8116",
                    "date": "2014-11-19T14:24:11.316Z",
                    "author": "Architect@example.com",
                    "events": [
                      {
                        "type": "type_updated",
                        "value": "Error"
                      }
                    ]
                  },
                  {
                    "topic_guid": "A245F4F2-2C01-B43B-B612-5E456BEF8116",
                    "date": "2013-10-21T17:34:22.409Z",
                    "author": "Architect@example.com",
                    "events": [
                      {
                        "type": "status_updated",
                        "value": "Open"
                      }
                    ]
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/comments/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieve a collection of comment events related to a project (default sort order is date).\n",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)\n\n|parameter|type|description|\n|---------|----|-----------|\n|comment_guid|string|guid of the comment |\n|topic_guid|string|guid of the topic |\n|author|string|userId of the author (value from extensions)|\n|date|datetime|date of the event|\n|type|string|type of the event (value from Comment event types, table above)|\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "author eq 'Architect@example.com' and date gt 2015-12-05T00:00:00+01:00 and type eq 'comment_created'"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)\n\n|parameter|description|\n|---------|-----------|\n|date|date of the event|\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "date asc"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/comment_event_GET"
                  }
                },
                "example": [
                  {
                    "comment_guid": "C4215F4D-AC45-A43A-D615-AA456BEF832B",
                    "topic_guid": "A211FCC2-3A3B-EAA4-C321-DE22ABC8414",
                    "date": "2014-11-19T14:24:11.316Z",
                    "author": "Architect@example.com",
                    "events": [
                      {
                        "type": "comment_created"
                      }
                    ]
                  },
                  {
                    "comment_guid": "C4215F4D-AC45-A43A-D615-AA456BEF832B",
                    "topic_guid": "A245F4F2-2C01-B43B-B612-5E456BEF8116",
                    "date": "2013-10-21T17:34:22.409Z",
                    "author": "Architect@example.com",
                    "events": [
                      {
                        "type": "viewpoint_updated",
                        "value": "b24a82e9-f67b-43b8-bda0-4946abf39624"
                      }
                    ]
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/bcf/{version}/projects/{project_id}/topics/{topic_id}/comments/{comment_id}/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieve a collection of comment events related to a comment (default sort order is date).\n",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "default": "2.1"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)\n\n|parameter|type|description|\n|---------|----|-----------|\n|author|string|userId of the author (value from extensions)|\n|date|datetime|date of the event|\n|type|string|type of the event (value from Comment event types, table above)|\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "author eq 'Architect@example.com' and date gt 2015-12-05T00:00:00+01:00 and type eq 'comment_created'"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)\n\n|parameter|description|\n|---------|-----------|\n|date|date of the event|\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "date asc"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/comment_event_GET"
                  }
                },
                "example": [
                  {
                    "comment_guid": "C4215F4D-AC45-A43A-D615-AA456BEF832B",
                    "topic_guid": "A211FCC2-3A3B-EAA4-C321-DE22ABC8414",
                    "date": "2014-11-19T14:24:11.316Z",
                    "author": "Architect@example.com",
                    "events": [
                      {
                        "type": "comment_created"
                      }
                    ]
                  },
                  {
                    "comment_guid": "C4215F4D-AC45-A43A-D615-AA456BEF832B",
                    "topic_guid": "A245F4F2-2C01-B43B-B612-5E456BEF8116",
                    "date": "2013-10-21T17:34:22.409Z",
                    "author": "Architect@example.com",
                    "events": [
                      {
                        "type": "comment_text_updated",
                        "value": "This is the updated comment"
                      }
                    ]
                  }
                ]
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "versions_GET": {
        "required": [
          "versions"
        ],
        "type": "object",
        "properties": {
          "versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_GET_versions"
            }
          }
        },
        "description": "Schema for Versions"
      },
      "user_GET": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "error": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "description": "Schema for error, BCF REST API."
      },
      "auth_GET": {
        "type": "object",
        "properties": {
          "oauth2_auth_url": {
            "type": "string",
            "nullable": true
          },
          "oauth2_token_url": {
            "type": "string",
            "nullable": true
          },
          "oauth2_dynamic_client_reg_url": {
            "type": "string",
            "nullable": true
          },
          "http_basic_supported": {
            "type": "boolean",
            "nullable": true
          },
          "supported_oauth2_flows": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "dynRegClient_GET": {
        "required": [
          "client_id",
          "client_secret"
        ],
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          }
        },
        "description": "Dynamic Client Meta Data"
      },
      "dynRegClient_POST": {
        "required": [
          "client_name",
          "redirect_url"
        ],
        "type": "object",
        "properties": {
          "client_name": {
            "maxLength": 60,
            "type": "string"
          },
          "client_description": {
            "maxLength": 4000,
            "type": "string"
          },
          "client_url": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          }
        },
        "description": "Dynamic Client Meta Data"
      },
      "extensions_GET": {
        "type": "object",
        "properties": {
          "topic_type": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "topic_status": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "topic_label": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "snippet_type": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "priority": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "user_id_type": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "stage": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "project_actions": {
            "$ref": "#/components/schemas/project_actions"
          },
          "topic_actions": {
            "$ref": "#/components/schemas/topic_actions"
          },
          "comment_actions": {
            "$ref": "#/components/schemas/comment_actions"
          }
        }
      },
      "project_GET": {
        "type": "object",
        "properties": {
          "project_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "authorization": {
            "$ref": "#/components/schemas/project_GET_authorization"
          }
        }
      },
      "project_PUT": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "projects": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/project_GET"
        }
      },
      "project_actions": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "update",
            "createTopic",
            "createDocument"
          ]
        }
      },
      "topic_actions": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "update",
            "updateBimSnippet",
            "updateRelatedTopics",
            "updateDocumentReferences",
            "updateFiles",
            "createComment",
            "createViewpoint",
            "delete"
          ]
        }
      },
      "comment_actions": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "update",
            "delete"
          ]
        }
      },
      "event_action": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "nullable": true
      },
      "comment_GET": {
        "required": [
          "author",
          "comment",
          "date",
          "guid",
          "topic_guid"
        ],
        "type": "object",
        "properties": {
          "guid": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "topic_guid": {
            "type": "string"
          },
          "viewpoint_guid": {
            "type": "string",
            "nullable": true
          },
          "reply_to_comment_guid": {
            "type": "string",
            "nullable": true
          },
          "modified_date": {
            "type": "string",
            "nullable": true
          },
          "modified_author": {
            "type": "string",
            "nullable": true
          },
          "authorization": {
            "$ref": "#/components/schemas/comment_GET_authorization"
          }
        }
      },
      "comment_POST": {
        "required": [
          "comment"
        ],
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "viewpoint_guid": {
            "type": "string",
            "nullable": true
          },
          "reply_to_comment_guid": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "comment_PUT": {
        "required": [
          "comment"
        ],
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "viewpoint_guid": {
            "type": "string",
            "nullable": true
          },
          "reply_to_comment_guid": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "document_GET": {
        "required": [
          "filename",
          "guid"
        ],
        "type": "object",
        "properties": {
          "guid": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          }
        }
      },
      "document_reference_GET": {
        "required": [
          "guid"
        ],
        "type": "object",
        "properties": {
          "guid": {
            "type": "string"
          },
          "document_guid": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "desctiption": {
            "type": "string",
            "nullable": true
          }
        },
        "description": "Schema for a single document reference GET, BCF REST API."
      },
      "document_reference_POST": {
        "type": "object",
        "properties": {
          "document_guid": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "desctiption": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "document_reference_PUT": {
        "required": [
          "guid"
        ],
        "type": "object",
        "properties": {
          "guid": {
            "type": "string"
          },
          "document_guid": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "desctiption": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "comment_event_GET": {
        "required": [
          "author",
          "comment_guid",
          "date",
          "topic_guid"
        ],
        "type": "object",
        "properties": {
          "comment_guid": {
            "type": "string"
          },
          "topic_guid": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "actions": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/event_action"
            }
          }
        }
      },
      "topic_event_GET": {
        "required": [
          "author",
          "date",
          "topic_guid"
        ],
        "type": "object",
        "properties": {
          "topic_guid": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "actions": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/event_action"
            }
          }
        }
      },
      "file_GET": {
        "type": "object",
        "properties": {
          "ifc_project": {
            "type": "string",
            "nullable": true
          },
          "ifc_spatial_structure_element": {
            "type": "string",
            "nullable": true
          },
          "file_name": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          }
        },
        "description": "Schema for a single file GET, BCF REST API."
      },
      "file_PUT": {
        "type": "object",
        "properties": {
          "ifc_project": {
            "type": "string",
            "nullable": true
          },
          "ifc_spatial_structure_element": {
            "type": "string",
            "nullable": true
          },
          "file_name": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "related_topic_GET": {
        "required": [
          "related_topic_guid"
        ],
        "type": "object",
        "properties": {
          "related_topic_guid": {
            "type": "string"
          }
        },
        "description": "Schema for single related topic GET, BCF REST API."
      },
      "related_topic_PUT": {
        "required": [
          "related_topic_guid"
        ],
        "type": "object",
        "properties": {
          "related_topic_guid": {
            "type": "string"
          }
        },
        "description": "Schema for related topic PUT, BCF REST API.."
      },
      "bim_snippet": {
        "required": [
          "is_external",
          "reference",
          "reference_schema",
          "snippet_type"
        ],
        "type": "object",
        "properties": {
          "snippet_type": {
            "type": "string"
          },
          "is_external": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "reference_schema": {
            "type": "string"
          }
        },
        "nullable": true
      },
      "topic_GET": {
        "required": [
          "creation_author",
          "creation_date",
          "guid",
          "title"
        ],
        "type": "object",
        "properties": {
          "guid": {
            "type": "string"
          },
          "topic_type": {
            "type": "string",
            "nullable": true
          },
          "topic_status": {
            "type": "string",
            "nullable": true
          },
          "reference_links": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "priority": {
            "type": "string",
            "nullable": true
          },
          "index": {
            "type": "integer",
            "nullable": true
          },
          "labels": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "nullable": true
            }
          },
          "creation_date": {
            "type": "string"
          },
          "creation_author": {
            "type": "string"
          },
          "modified_date": {
            "type": "string"
          },
          "modified_author": {
            "type": "string"
          },
          "assigned_to": {
            "type": "string",
            "nullable": true
          },
          "stage": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "bim_snippet": {
            "$ref": "#/components/schemas/bim_snippet"
          },
          "due_date": {
            "type": "string",
            "nullable": true
          },
          "authorization": {
            "$ref": "#/components/schemas/topic_GET_authorization"
          }
        }
      },
      "topic_POST": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "topic_type": {
            "type": "string",
            "nullable": true
          },
          "topic_status": {
            "type": "string",
            "nullable": true
          },
          "reference_links": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "priority": {
            "type": "string",
            "nullable": true
          },
          "index": {
            "type": "integer",
            "nullable": true
          },
          "labels": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "nullable": true
            }
          },
          "assigned_to": {
            "type": "string",
            "nullable": true
          },
          "stage": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "bim_snippet": {
            "$ref": "#/components/schemas/bim_snippet"
          },
          "due_date": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "topic_PUT": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "topic_type": {
            "type": "string",
            "nullable": true
          },
          "topic_status": {
            "type": "string",
            "nullable": true
          },
          "reference_links": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "priority": {
            "type": "string",
            "nullable": true
          },
          "index": {
            "type": "integer",
            "nullable": true
          },
          "labels": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "nullable": true
            }
          },
          "assigned_to": {
            "type": "string",
            "nullable": true
          },
          "stage": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "bim_snippet": {
            "$ref": "#/components/schemas/bim_snippet"
          },
          "due_date": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "bitmap_GET": {
        "type": "object",
        "properties": {
          "guid": {
            "type": "string"
          },
          "bitmap_type": {
            "type": "string",
            "enum": [
              "jpg",
              "png"
            ]
          },
          "location": {
            "$ref": "#/components/schemas/location"
          },
          "normal": {
            "$ref": "#/components/schemas/direction"
          },
          "up": {
            "$ref": "#/components/schemas/direction"
          },
          "height": {
            "type": "number"
          }
        }
      },
      "bitmap_POST": {
        "type": "object",
        "properties": {
          "bitmap_type": {
            "type": "string",
            "enum": [
              "jpg",
              "png"
            ]
          },
          "bitmap_data": {
            "type": "string",
            "format": "base64"
          },
          "location": {
            "$ref": "#/components/schemas/location"
          },
          "normal": {
            "$ref": "#/components/schemas/direction"
          },
          "up": {
            "$ref": "#/components/schemas/direction"
          },
          "height": {
            "type": "number"
          }
        }
      },
      "clipping_plane": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/location"
          },
          "direction": {
            "$ref": "#/components/schemas/direction"
          }
        },
        "nullable": true
      },
      "coloring": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string"
          },
          "components": {
            "$ref": "#/components/schemas/component_list"
          }
        }
      },
      "coloring_GET": {
        "type": "object",
        "properties": {
          "coloring": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/coloring"
            }
          }
        },
        "description": "Schema for coloring GET, BCF REST API."
      },
      "component": {
        "type": "object",
        "properties": {
          "ifc_guid": {
            "type": "string",
            "nullable": true
          },
          "originating_system": {
            "type": "string",
            "nullable": true
          },
          "authoring_tool_id": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "component_list": {
        "type": "array",
        "nullable": true,
        "items": {
          "$ref": "#/components/schemas/component"
        }
      },
      "components": {
        "type": "object",
        "properties": {
          "selection": {
            "$ref": "#/components/schemas/component_list"
          },
          "coloring": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/coloring"
            }
          },
          "visibility": {
            "$ref": "#/components/schemas/visibility"
          }
        },
        "nullable": true
      },
      "direction": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "z": {
            "type": "number"
          }
        }
      },
      "line": {
        "type": "object",
        "properties": {
          "start_point": {
            "$ref": "#/components/schemas/point"
          },
          "end_point": {
            "$ref": "#/components/schemas/point"
          }
        },
        "nullable": true
      },
      "location": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "z": {
            "type": "number"
          }
        },
        "nullable": true
      },
      "orthogonal_camera": {
        "type": "object",
        "properties": {
          "camera_view_point": {
            "$ref": "#/components/schemas/point"
          },
          "camera_direction": {
            "$ref": "#/components/schemas/direction"
          },
          "camera_up_vector": {
            "$ref": "#/components/schemas/direction"
          },
          "view_to_world_scale": {
            "type": "number"
          }
        },
        "nullable": true
      },
      "perspective_camera": {
        "type": "object",
        "properties": {
          "camera_view_point": {
            "$ref": "#/components/schemas/point"
          },
          "camera_direction": {
            "$ref": "#/components/schemas/direction"
          },
          "camera_up_vector": {
            "$ref": "#/components/schemas/direction"
          },
          "field_of_view": {
            "type": "number"
          }
        },
        "nullable": true
      },
      "point": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "z": {
            "type": "number"
          }
        }
      },
      "selection_GET": {
        "type": "object",
        "properties": {
          "selection": {
            "$ref": "#/components/schemas/component_list"
          }
        },
        "description": "Schema for selection GET, BCF REST API."
      },
      "snapshot_GET": {
        "type": "object",
        "properties": {
          "snapshot_type": {
            "type": "string",
            "enum": [
              "jpg",
              "png"
            ]
          }
        },
        "nullable": true
      },
      "snapshot_POST": {
        "type": "object",
        "properties": {
          "snapshot_type": {
            "type": "string",
            "enum": [
              "jpg",
              "png"
            ]
          },
          "snapshot_data": {
            "type": "string",
            "format": "base64"
          }
        },
        "nullable": true
      },
      "view_setup_hints": {
        "type": "object",
        "properties": {
          "spaces_visible": {
            "type": "boolean",
            "default": false
          },
          "space_boundaries_visible": {
            "type": "boolean",
            "default": false
          },
          "openings_visible": {
            "type": "boolean",
            "default": false
          }
        },
        "nullable": true
      },
      "viewpoint_GET": {
        "required": [
          "guid"
        ],
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "nullable": true
          },
          "guid": {
            "type": "string"
          },
          "orthogonal_camera": {
            "$ref": "#/components/schemas/orthogonal_camera"
          },
          "perspective_camera": {
            "$ref": "#/components/schemas/perspective_camera"
          },
          "lines": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/line"
            }
          },
          "clipping_planes": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/clipping_plane"
            }
          },
          "bitmaps": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/bitmap_GET"
            }
          },
          "snapshot": {
            "$ref": "#/components/schemas/snapshot_GET"
          }
        }
      },
      "viewpoint_POST": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "nullable": true
          },
          "orthogonal_camera": {
            "$ref": "#/components/schemas/orthogonal_camera"
          },
          "perspective_camera": {
            "$ref": "#/components/schemas/perspective_camera"
          },
          "lines": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/line"
            }
          },
          "clipping_planes": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/clipping_plane"
            }
          },
          "bitmaps": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/bitmap_POST"
            }
          },
          "snapshot": {
            "$ref": "#/components/schemas/snapshot_POST"
          },
          "components": {
            "$ref": "#/components/schemas/components"
          }
        }
      },
      "visibility": {
        "type": "object",
        "properties": {
          "default_visibility": {
            "type": "boolean",
            "default": false
          },
          "exceptions": {
            "$ref": "#/components/schemas/component_list"
          },
          "view_setup_hints": {
            "$ref": "#/components/schemas/view_setup_hints"
          }
        }
      },
      "visibility_GET": {
        "type": "object",
        "properties": {
          "visibility": {
            "$ref": "#/components/schemas/visibility"
          }
        }
      },
      "versions_GET_versions": {
        "required": [
          "version_id"
        ],
        "type": "object",
        "properties": {
          "version_id": {
            "type": "string"
          },
          "detailed_version": {
            "type": "string"
          }
        }
      },
      "project_GET_authorization": {
        "type": "object",
        "properties": {
          "project_actions": {
            "$ref": "#/components/schemas/project_actions"
          }
        }
      },
      "comment_GET_authorization": {
        "type": "object",
        "properties": {
          "comment_actions": {
            "$ref": "#/components/schemas/comment_actions"
          }
        }
      },
      "topic_GET_authorization": {
        "type": "object",
        "properties": {
          "topic_actions": {
            "$ref": "#/components/schemas/topic_actions"
          },
          "topic_status": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "parameters": {
      "version": {
        "name": "version",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "default": "2.1"
        }
      },
      "project_id": {
        "name": "project_id",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "topic_id": {
        "name": "topic_id",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "comment_id": {
        "name": "comment_id",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "viewpoint_id": {
        "name": "viewpoint_id",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "document_reference_id": {
        "name": "document_reference_id",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "bitmap_id": {
        "name": "bitmap_id",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "document_id": {
        "name": "document_id",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "top": {
        "name": "$top",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "skip": {
        "name": "$skip",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      }
    }
  }
}